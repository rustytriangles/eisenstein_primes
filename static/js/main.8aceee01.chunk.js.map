{"version":3,"sources":["eisenstein.js","App.js","serviceWorker.js","index.js"],"names":["isPrime","require","Eisenstein","this","a","b","args","length","Array","arr","Object","console","log","Math","sqrt","g","c","max","abs","norm","App","props","state","s_real","s_imag","scale","primeProps","radius","fillStyle","strokeColor","pathProps","strokeWidth","e","keyCode","setState","prevState","newScale","min","target","getBBox","mat","getScreenCTM","inverse","r","clientX","i","clientY","d","f","round","rmin","imin","rmax","imax","cx","cy","s3","bmin","floor","bmax","ceil","amin","amax","points","v","real","imag","x","y","push","start_pt","curr_pt","curr_dir","add","multiply","equalTo","path_data","fill","stroke","stroke-width","w","h","xcount","ycount","prime_points","getPrimePoints","path","getPath","box","class","xmlns","width","height","viewBox","onKeyDown","keydown","bind","onClick","onclick","tabIndex","map","item","strokeStyle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8aceee01.chunk.js","sourcesContent":["const {isPrime} = require('mathjs');\n\nexport class Eisenstein {\n    constructor(...args) {\n        this.a = 0;\n        this.b = 0;\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\n            let arr = args[0];\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\n                this.a = arr[0];\n                this.b = arr[1];\n                return;\n            }\n        }\n\n        if (args.length === 1 && args[0] instanceof Object && 'a' in args[0]) {\n            this.a = args[0].a;\n            if ('b' in args[0]) {\n                this.b = args[0].b;\n            }\n            return;\n        }\n\n        if (args.length === 1 && typeof(args[0]) == \"number\") {\n            this.a = args[0];\n            this.b = 0;\n            return;\n        }\n\n        if (args.length === 2) {\n            if (typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\n                this.a = args[0];\n                this.b = args[1];\n                return;\n            }\n        }\n\n        //        throw Errors.ILLEGAL_PARAMETERS;\n        console.log('throw');\n        throw 666;\n    }\n\n    real() {\n        return this.a - this.b/2;\n    }\n\n    imag() {\n        return this.b*Math.sqrt(3)/2;\n    }\n\n    equalTo(g) {\n        return (this.a == g.a) && (this.b == g.b);\n    }\n\n    add(g) {\n        return new Eisenstein(this.a + g.a, this.b + g.b);\n    }\n\n    subtract(g) {\n        return new Eisenstein(this.a - g.a, this.b - g.b);\n    }\n\n    multiply(g) {\n        return new Eisenstein(this.a*g.a - this.b*g.b,\n                              this.b*g.a + this.a*g.b - this.b*g.b);\n    }\n\n    conjugate() {\n        return new Eisenstein(this.a, -this.b);\n    }\n\n    norm() {\n        return this.a*this.a - this.a*this.b + this.b*this.b;\n    }\n\n    isPrime() {\n        if (this.a === 0 || this.b === 0 || this.a === this.b) {\n            const c = Math.max(Math.abs(this.a), Math.abs(this.b));\n            return isPrime(c) && (c%3) == 2;\n        } else {\n            return isPrime(this.norm());\n        }\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport {Eisenstein} from './eisenstein.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            s_real: 3,\n            s_imag: 1,\n            scale: 12,\n        };\n\n        this.primeProps = {\n            radius: 5,\n            fillStyle: \"magenta\",\n            strokeColor: \"none\"\n        };\n\n        this.pathProps = {\n            fillStyle: \"none\",\n            strokeColor: \"grey\",\n            strokeWidth: \"3\"\n        };\n    }\n\n    keydown(e) {\n        switch (e.keyCode) {\n        case 187:\n            this.setState((prevState) => {\n                const newScale = Math.min(22, prevState.scale+1);\n                return {\n                    s_real: prevState.s_real,\n                    s_imag: prevState.s_imag,\n                    scale: newScale\n                }\n            });\n            break;\n        case 189:\n            this.setState((prevState) => {\n                const newScale = Math.max(4, prevState.scale-1);\n                return {\n                    s_real: prevState.s_real,\n                    s_imag: prevState.s_imag,\n                    scale: newScale\n                }\n            });\n            break;\n        }\n    }\n\n    onclick(e) {\n        const bbox = e.target.getBBox();\n        const mat = e.target.getScreenCTM().inverse();\n        const r = (e.clientX * mat.a + mat.e) / this.state.scale;\n        const i = -(e.clientY * mat.d + mat.f) / this.state.scale;\n        const b = Math.round(i / (Math.sqrt(3)/2));\n        const a = Math.round(r + b/2);\n        this.setState((prevState) => {\n            return {s_real: a,\n                    s_imag: b,\n                    scale: prevState.scale\n                   }\n        });\n    }\n\n    getPrimePoints(rmin, imin, rmax, imax, cx, cy, scale) {\n        const s3 = Math.sqrt(3)/2;\n        const bmin = Math.floor(imin/s3);\n        const bmax = Math.ceil(imax/s3);\n        const amin = Math.floor(rmin + bmin/2);\n        const amax = Math.ceil(rmax + bmax/2);\n        let points = [];\n        for (let a=amin; a<=amax; a++) {\n            for (let b=bmin; b<=bmax; b++) {\n                const v = new Eisenstein(a,b);\n                const r = v.real();\n                if (r < rmin || r > rmax) {\n                    continue;\n                }\n                const i = v.imag();\n                if (i < imin || i > imax) {\n                    continue;\n                }\n                if (v.isPrime()) {\n                    const x = cx + scale*r;\n                    const y = cy - scale*i;\n                    points.push([x, y]);\n                }\n            }\n        }\n        return points;\n    }\n\n    getPath(cx, cy, scale) {\n        const start_pt = new Eisenstein(this.state.s_real, this.state.s_imag);\n\n        let curr_pt = new Eisenstein(start_pt);\n        let curr_dir = new Eisenstein(1,0);\n        let points = [[cx + scale*curr_pt.real(), cy - scale*curr_pt.imag()]];\n        do {\n            curr_pt = curr_pt.add(curr_dir);\n            const x = cx + scale*curr_pt.real();\n            const y = cy - scale*curr_pt.imag();\n            points.push([x, y]);\n            if (curr_pt.isPrime()) {\n                curr_dir = curr_dir.multiply(new Eisenstein(0,-1));\n            }\n        } while(!curr_pt.equalTo(start_pt));\n\n        let path_data = '';\n        for (let i=0; i<points.length; i++) {\n            path_data += (i===0?' M':' L');\n            path_data += ' ' + points[i][0] + ' ' + points[i][1];\n        }\n\n        return <path fill={this.pathProps.fillStyle}\n                     stroke={this.pathProps.strokeColor}\n                     stroke-width={this.pathProps.strokeWidth}\n                     d={path_data} />\n    }\n\n    render() {\n        // convert a list of points into a collection of SVG circles\n        const dotfun = (items) => items.map((item) => {\n            const x = item[0];\n            const y = item[1];\n            const rad = 5;\n            return <circle cx={x} cy={y} r={this.primeProps.radius}\n                           fill={this.primeProps.fillStyle}\n                           stroke={this.primeProps.strokeStyle}\n                   />\n        })\n\n        const w = 1000;\n        const h = 960;\n        const xcount = Math.ceil((w/2) / this.state.scale);\n        const ycount = Math.ceil((h/2) / this.state.scale);\n        const rmin = -xcount;\n        const rmax = xcount;\n        const imin = -ycount;\n        const imax = ycount;\n        const prime_points = this.getPrimePoints(rmin, imin, rmax, imax, 0, 0, this.state.scale);\n        const path = this.getPath(0, 0, this.state.scale);\n        const box = [-w/2, -h/2, w, h];\n        return (\n            <div class=\"wrapper\">\n                <h2>Eisenstein Primes</h2>\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\n                     width={w/2}\n                     height={h/2}\n                     viewBox={box}\n                     onKeyDown={this.keydown.bind(this)}\n                     onClick={ this.onclick.bind(this)}\n                     tabIndex=\"1\"\n                >\n                <g fill=\"#FF00FF\">\n                    {path}\n                    <> {dotfun(prime_points)} </>\n                </g>\n            </svg>\n                <h3>Starting Point: {this.state.s_real} + {this.state.s_imag} <em>&#969;</em></h3>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}